package br.edu.ufrpe.uag.projetao.model;
// Generated 20/04/2016 11:43:59 by Hibernate Tools 4.3.1

import br.edu.ufrpe.uag.projetao.annotations.Coluna;
import br.edu.ufrpe.uag.projetao.annotations.Tabela;
import br.edu.ufrpe.uag.projetao.interfaces.InterfaceEntity;
import java.util.HashSet;
import java.util.Objects;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * Usuario generated by hbm2java
 */
@Entity
@Table(name = "usuario", schema = "public")
@Tabela
public class Usuario implements java.io.Serializable, InterfaceEntity {

	private int id;
	@Coluna(colunaNome = "Perfil", colunaPosicao = 2)
	private Perfil perfil;
	@Coluna(colunaNome = "Nome", colunaPosicao = 0)
	private String nome;
	@Coluna(colunaNome = "E-mail", colunaPosicao = 1)
	private String email;
	private String senha;
	private Set<LiberacaoBaseTexto> liberacaoBaseTextosForEscravo = new HashSet<>(0);
	private Set<AlocacaoTexto> alocacaoTextos = new HashSet<>(0);
	private Set<BaseTexto> baseTextos = new HashSet<>(0);
	private Set<ClassificacaoTexto> classificacaoTextos = new HashSet<>(0);
	private Set<LiberacaoBaseTexto> liberacaoBaseTextosForSupervisor = new HashSet<>(0);

	public Usuario() {
	}

	public Usuario(int id, Perfil perfil, String email, String senha) {
		this.id = id;
		this.perfil = perfil;
		this.email = email;
		this.senha = senha;
	}

	public Usuario(int id, Perfil perfil, String nome, String email, String senha,
			Set<LiberacaoBaseTexto> liberacaoBaseTextosForEscravo, Set<AlocacaoTexto> alocacaoTextos,
			Set<BaseTexto> baseTextos, Set<ClassificacaoTexto> classificacaoTextos,
			Set<LiberacaoBaseTexto> liberacaoBaseTextosForSupervisor) {
		this.id = id;
		this.perfil = perfil;
		this.nome = nome;
		this.email = email;
		this.senha = senha;
		this.liberacaoBaseTextosForEscravo = liberacaoBaseTextosForEscravo;
		this.alocacaoTextos = alocacaoTextos;
		this.baseTextos = baseTextos;
		this.classificacaoTextos = classificacaoTextos;
		this.liberacaoBaseTextosForSupervisor = liberacaoBaseTextosForSupervisor;
	}

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "perfil", nullable = false)
	public Perfil getPerfil() {
		return this.perfil;
	}

	public void setPerfil(Perfil perfil) {
		this.perfil = perfil;
	}

	@Column(name = "nome", length = 100)
	public String getNome() {
		return this.nome;
	}

	public void setNome(String nome) {
		this.nome = nome;
	}

	@Column(name = "email", nullable = false)
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Column(name = "senha", nullable = false)
	public String getSenha() {
		return this.senha;
	}

	public void setSenha(String senha) {
		this.senha = senha;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "usuarioByEscravo")
	public Set<LiberacaoBaseTexto> getLiberacaoBaseTextosForEscravo() {
		return this.liberacaoBaseTextosForEscravo;
	}

	public void setLiberacaoBaseTextosForEscravo(Set<LiberacaoBaseTexto> liberacaoBaseTextosForEscravo) {
		this.liberacaoBaseTextosForEscravo = liberacaoBaseTextosForEscravo;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "usuario")
	public Set<AlocacaoTexto> getAlocacaoTextos() {
		return this.alocacaoTextos;
	}

	public void setAlocacaoTextos(Set<AlocacaoTexto> alocacaoTextos) {
		this.alocacaoTextos = alocacaoTextos;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "usuario")
	public Set<BaseTexto> getBaseTextos() {
		return this.baseTextos;
	}

	public void setBaseTextos(Set<BaseTexto> baseTextos) {
		this.baseTextos = baseTextos;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "usuario")
	public Set<ClassificacaoTexto> getClassificacaoTextos() {
		return this.classificacaoTextos;
	}

	public void setClassificacaoTextos(Set<ClassificacaoTexto> classificacaoTextos) {
		this.classificacaoTextos = classificacaoTextos;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "usuarioBySupervisor")
	public Set<LiberacaoBaseTexto> getLiberacaoBaseTextosForSupervisor() {
		return this.liberacaoBaseTextosForSupervisor;
	}

	public void setLiberacaoBaseTextosForSupervisor(Set<LiberacaoBaseTexto> liberacaoBaseTextosForSupervisor) {
		this.liberacaoBaseTextosForSupervisor = liberacaoBaseTextosForSupervisor;
	}

	@Override
	public int hashCode() {
		int hash = 7;
		hash = 31 * hash + Objects.hashCode(this.perfil);
		hash = 31 * hash + Objects.hashCode(this.nome);
		hash = 31 * hash + Objects.hashCode(this.email);
		return hash;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		final Usuario other = (Usuario) obj;
		if (!Objects.equals(this.nome, other.nome)) {
			return false;
		}
		if (!Objects.equals(this.email, other.email)) {
			return false;
		}
		return Objects.equals(this.perfil, other.perfil);
	}

	@Override
	public String toString() {
		return "Usuario{" + "perfil=" + perfil + ", nome=" + nome + ", email=" + email + '}';
	}

}
